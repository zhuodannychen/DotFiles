# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet valid_bounds "checks grid bounds" b
bool val_bounds(int i, int j, int n, int m) {
	return i >= 0 && i < n && j >= 0 && j < m;
}
endsnippet

snippet comb "calculates nCr" b
const int MAXN = $1;
long long fact[MAXN]; // fact[i] = i !
long long inv[MAXN]; // inv[i] = i-1
long long finv[MAXN]; // finv[i] = (i !)-1

void buildFact(int n) {
    fact[0] = finv[0] = inv[1] = 1;
    for(int i = 2; i < n; i++) inv[i] = (MOD - (MOD / i) * inv[MOD%i] % MOD) % MOD;
    for(int i = 1; i < n; i++){
        fact[i] = fact[i-1] * i % MOD;
        finv[i] = finv[i-1] * inv[i] % MOD;
    }
}
long long C(int a,int b){if(a < b || b < 0)return 0; return fact[a] * finv[b] % MOD * finv[a-b] % MOD;}
endsnippet

snippet dsu "union set" b
class UnionFind {
private:
    vector<int> p, rank, setSize;
    int numSets;
public:
    UnionFind(int N) {
    setSize.assign(N, 1);
    numSets = N; rank.assign(N, 0);
    p.assign(N, 0);
    for (int i = 0; i < N; i++)
        p[i] = i;
    }
    int findSet(int i) {
        return (p[i] == i) ? i : (p[i] = findSet(p[i]));
    }
    bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }
    void unionSet(int i, int j) { 
        if (!isSameSet(i, j)) {
            numSets--; 
            int x = findSet(i), y = findSet(j);
            if (rank[x] > rank[y]) {
                p[y] = x;
                setSize[x] += setSize[y];
            }
            else {
                p[x] = y;
                setSize[y] += setSize[x];
                if (rank[x] == rank[y])
                    rank[y]++;
            }
        }
    }
    int numDisjointSets() { return numSets; }
    int sizeOfSet(int i) { return setSize[findSet(i)]; }
};
endsnippet

snippet sieve "prime numbers" b
vi primes;
bool sieve[N];

void sievef(int N) {
    memset(sieve, true, sizeof(sieve));
    sieve[0] = false;
    sieve[1] = false;
    for (ll i = 2; i <= N; i++) {
        if (sieve[i]) {
            primes.push_back(i);
            for (ll j = i*i; j <= N; j+=i)
                sieve[j] = false;
        }
    }
}
endsnippet

snippet primeFactors "find prime factors" b
vi primeFactors(ll N) {
    vi factors;
    ll PF_idx = 0, PF = primes[PF_idx];
    while (N != 1 && (PF * PF <= N)) {
        while (N % PF == 0) { N /= PF; factors.push_back(PF); }
        PF = primes[++PF_idx];
    }
    if (N != 1) factors.push_back(N);
    return factors;
}
endsnippet

snippet segtree_lazy "segment tree with lazy propagation" b
#define MAXSEG 262144

int N, Q;
int st[MAXSEG];
int lazy[MAXSEG];

void push(int lo, int hi, int node) {
	if (lazy[node] == 0) return;
	st[node] += (hi - lo + 1) * lazy[node];
	if (lo != hi) {
		lazy[2 * node + 1] += lazy[node];
		lazy[2 * node + 2] += lazy[node];
	}
	lazy[node] = 0;
}

void update_range(int s, int e, int x, int lo=0, int hi=-1, int node=0) {
	if (hi == -1) hi = N - 1;
	push(lo, hi, node);
	if (hi < s || lo > e) return;
	if (lo >= s && hi <= e) {
		lazy[node] = x;
		push(lo, hi, node);
		return;
	}
	int mid = (lo + hi) / 2;
	update_range(s, e, x, lo, mid, 2 * node + 1);
	update_range(s, e, x, mid + 1, hi, 2 * node + 2);
	st[node] = st[2 * node + 1] + st[2 * node + 2];
}

int query(int s, int e, int lo=0, int hi=-1, int node=0) {
	if (hi == -1) hi = N - 1;
	push(lo, hi, node);
	if (hi < s || lo > e) return 0;
	if (lo >= s && hi <= e) return st[node];
	int mid = (lo + hi) / 2;
	return query(s, e, lo, mid, 2 * node + 1) + 
			query(s, e, mid + 1, hi, 2 * node + 2);
}
endsnippet

snippet trie_vectors "Trie implementation using 2d vectors" b
const int MaxNodes = 2000005;
const int alphabet = 26;

struct Trie {
    int sz;
    vector<vector<int>> trie;
    vector<int> cnt;
    Trie() {
        trie.resize(MaxNodes, vector <int> (alphabet));
        cnt.resize(MaxNodes);
        sz = 0;
    }

    void insert(string str) {
        int u = 0;
        for (char c : str) {
            if (!trie[u][c-'A'])
                trie[u][c-'A'] = ++sz;
            u = trie[u][c-'A'];
        }
        ++cnt[u];
    }

    bool search (string str) {
        int u = 0;
        for (char c : str) {
            if (!trie[u][c-'A'])
                return false;
            u = trie[u][c-'A'];
        }
        return cnt[u] > 0;
    }

    bool prefix (string str) {
        int u = 0;
        for (char c : str) {
            if (!trie[u][c-'A'])
                return false;
            u = trie[u][c-'A'];
        }
        return true;
    }
};
endsnippet

snippet trie_pointers "Trie implementation using pointers" b
// make sure to change lines where it uses - '0'
const int alphabet = 26;

class TrieNode {
    public:
    // Indicates end of string
    bool last;
    TrieNode* children[alphabet];
    TrieNode() {
        this->last = false;
        for (int i = 0; i < alphabet; ++i)
            this->children[i] = NULL;
    }
    ~TrieNode() {
        for (auto& node : children)
            if (node) delete node;
    }
};

class Trie {
    public:
    TrieNode* root;
    Trie() {
        this->root = new TrieNode();
    }
    ~Trie() {
        delete root;
    }

    void insert(string text) {
        int length = text.length();
        int index = 0;
        TrieNode* head = this->root;
        for (int level = 0; level < length; ++level) {
            index = text[level] - '0';
            if (head->children[index] == NULL)
                head->children[index] = new TrieNode();
            head = head->children[index];
        }
        if (head != NULL)
            head->last = true;
    }

    bool search(string word) {
        TrieNode* head = this->root;
        int index = 0;
        for (char ch : word) {
            index = ch - '0';
            if (!head->children[index]) { return false; }
            head = head->children[index];
        }
        return head->last;
    }

    int words(TrieNode* head) {
        int counter = 0;
        if (head != NULL) {
            if (head->last == true)
                counter++;
            for (int i = 0; i < alphabet; i++) {
                if (head->children[i] != NULL)
                    counter += this->words(head->children[i]);
            }
        }
        return counter;
    }

    int startsWith(string prefix) {
        TrieNode* head = this->root;
        if (head != NULL) {
            int n = prefix.length();
            int level = 0;
            int index = 0;
            while (level < n) {
                index = prefix[level] - '0';
                if (head->children[index] != NULL)
                    head = head->children[index];
                else
                    return 0;
                level++;
            }
            if (level == n) {
                if (head == NULL)
                    return 1;
                else
                    return this->words(head);
            }
        }
        return 0;
    }
};
endsnippet

snippet fenwick_tree "Fenwick Tree Implementation" b
struct FenwickTree {
    vector<int> bit;  // binary indexed tree
    int n;

    FenwickTree(int n) {
        this->n = n;
        bit.assign(n, 0);
    }

    FenwickTree(vector<int> a) : FenwickTree(a.size()) {
        for (size_t i = 0; i < a.size(); i++)
            add(i, a[i]);
    }

    int sum(int r) {
        int ret = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1)
            ret += bit[r];
        return ret;
    }

    int sum(int l, int r) {
        return sum(r) - sum(l - 1);
    }

    void add(int idx, int delta) {
        for (; idx < n; idx = idx | (idx + 1))
            bit[idx] += delta;
    }
};
endsnippet

snippet seg_tree "Segment Tree Implementation, lcm" b
#define MAXSEG 100005

int N, Q;
ll st[4*MAXSEG];
vector<int> arr;

void build(int node=0, int lo=0, int hi=-1) {
    if (hi == -1) hi = N - 1;
    // update arr
    if (lo == hi) { st[node] = arr[lo]; return; }
    int mid = (lo + hi) / 2;
    build(2*node+1, lo, mid);
    build(2*node+2, mid+1, hi);
    int left_tree = st[2*node+1];
    int right_tree = st[2*node+2];
    st[node] = lcm(left_tree, right_tree);
}

void update(int i, ll x, int lo=0, int hi=-1, int node=0) {
    if (hi == -1) hi = N - 1;
    if (hi < i || lo > i) return;
    if (lo == hi) { st[node] = x; return; }
    int mid = (lo + hi) / 2;
    update(i, x, lo, mid, 2 * node + 1);
    update(i, x, mid + 1, hi, 2 * node + 2);
    int left_tree = st[2*node+1];
    int right_tree = st[2*node+2];
    st[node] = lcm(left_tree, right_tree);
}

ll query(int s, int e, int lo=0, int hi=-1, int node=0) {
    if (hi == -1) hi = N - 1;
    if (hi < s || lo > e) return 1;
    if (lo >= s && hi <= e) return st[node];
    int mid = (lo + hi) / 2;
    int left_tree = query(s, e, lo, mid, 2 * node + 1);
    int right_tree = query(s, e, mid + 1, hi, 2 * node + 2);
    return lcm(left_tree, right_tree);
}
endsnippet

snippet dijkstra "Dijkstra" b
priority_queue<pair<double, int>> pq;
vector<vector<pair<double, int>>> adj;
vector<double> d;
vi p;

void dijkstra(int s, vector<double> & d, vector<int> & p) {
    int n = adj.size();
    d.assign(n, inf);
    p.assign(n, -1);
    vector<bool> u(n, false);
    priority_queue<pair<double, int>> pq;

    d[s] = 0;
    pq.push({0, 0});
    while (!pq.empty()) {
        pair<double, int> cur = pq.top();
        int v = cur.second;
        pq.pop();
        u[v] = true;

        for (auto edge : adj[v]) {
            double len = edge.first;
            int to = edge.second;

            if (d[v] + len < d[to]) {
                d[to] = d[v] + len;
                p[to] = v;
                pq.push({d[to], to});
            }
        }
    }
}
endsnippet

snippet struct_cmp "struct custom compare" b
bool operator<(const quest& o) const {
}
endsnippet

snippet custom_cmp "custom compare" b
int cmp(tri a, tri b) {
}
endsnippet

snippet max_flow "Max Flow" b
template<int V, class T=long long>
class max_flow {
	static const T INF = numeric_limits<T>::max();

	struct edge {
		int t, rev;
		T cap, f;
	};

	vector<edge> adj[V];
	int dist[V];
	int ptr[V];

	bool bfs(int s, int t) {
		memset(dist, -1, sizeof dist);
		dist[s] = 0;
		queue<int> q({ s });
		while (!q.empty() && dist[t] == -1) {
			int n = q.front();
			q.pop();
			for (auto& e : adj[n]) {
				if (dist[e.t] == -1 && e.cap != e.f) {
					dist[e.t] = dist[n] + 1;
					q.push(e.t);
				}
			}
		}
		return dist[t] != -1;
	}

	T augment(int n, T amt, int t) {
		if (n == t) return amt;
		for (; ptr[n] < adj[n].size(); ptr[n]++) {
			edge& e = adj[n][ptr[n]];
			if (dist[e.t] == dist[n] + 1 && e.cap != e.f) {
				T flow = augment(e.t, min(amt, e.cap - e.f), t);
				if (flow != 0) {
					e.f += flow;
					adj[e.t][e.rev].f -= flow;
					return flow;
				}
			}
		}
		return 0;
	}

public:
	void add(int u, int v, T cap=1, T rcap=0) {
		adj[u].push_back({ v, (int) adj[v].size(), cap, 0 });
		adj[v].push_back({ u, (int) adj[u].size() - 1, rcap, 0 });
	}

	T calc(int s, int t) {
		T flow = 0;
		while (bfs(s, t)) {
			memset(ptr, 0, sizeof ptr);
			while (T df = augment(s, INF, t))
				flow += df;
		}
		return flow;
	}

	void clear() {
		for (int n = 0; n < V; n++)
			adj[n].clear();
	}
};
endsnippet

snippet suffix_array "Suffix Array with LCP" b
vector<int> suffix_array(string S) {
	int N = S.size();
	vector<int> sa(N), classes(N);
	for (int i = 0; i < N; i++) {
		sa[i] = N - 1 - i;
		classes[i] = S[i];
	}
	stable_sort(sa.begin(), sa.end(), [&S](int i, int j) {
		return S[i] < S[j];
	});
	for (int len = 1; len < N; len *= 2) {
		vector<int> c(classes);
		for (int i = 0; i < N; i++) {
			bool same = i && sa[i - 1] + len < N
			              && c[sa[i]] == c[sa[i - 1]]
			              && c[sa[i] + len / 2] == c[sa[i - 1] + len / 2];
			classes[sa[i]] = same ? classes[sa[i - 1]] : i;
		}
		vector<int> cnt(N), s(sa);
		for (int i = 0; i < N; i++)
			cnt[i] = i;
		for (int i = 0; i < N; i++) {
			int s1 = s[i] - len;
			if (s1 >= 0)
				sa[cnt[classes[s1]]++] = s1;
		}
	}
	return sa;
}

vector<int> lcp_array(const vector<int>& sa, string S) {
	int N = S.size();
	vector<int> rank(N), lcp(N - 1);
	for (int i = 0; i < N; i++)
		rank[sa[i]] = i;

	int pre = 0;
	for (int i = 0; i < N; i++) {
		if (rank[i] < N - 1) {
			int j = sa[rank[i] + 1];
			while (max(i, j) + pre < S.size() && S[i + pre] == S[j + pre])
				++pre;
			lcp[rank[i]] = pre;
			if (pre > 0)
				--pre;
		}
	}
	return lcp;
}
endsnippet
